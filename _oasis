OASISFormat: 0.4
Name:        LILiS
Version:     0.1
Synopsis:    Library to Interpret Lindenmayer Systems
Description: A Library to interpret, evaluate and draw L-systems.
Authors:     Gabriel Radanne <drupyog@zoho.com>
License:     MIT
Plugins:     META (0.3)
Homepage:    http://drup.github.io/LILiS/

AlphaFeatures: pure_interface

BuildTools: ocamlbuild

Flag sequence
  Description: Build the Sequence interface and use it for glilis.exe

Flag cairo
  Description: Enable the cairo backend for png and gtk output.
  Default: true

Flag tyxml
  Description: Enable the tyxml backend for svg output.
  Default: true

Flag executable
  Description: Build the executable glilis_ex.native.
  Default: false

# A small library to build and compute arithmetic expression trees.

Library minicalc
  Path: mini_calc
  BuildTools: ocamlbuild
  Modules:
    Mini_calc
  InternalModules:
    Calc_type, Calc_eval, Calc_lexer, Calc_parser
  BuildDepends:
    batteries

# Various streams implementation for lilis.

Library streams
  FindLibParent: lilis
  Path: lilis
  Modules : Ls_streams

Library sequence
  Build$: flag(sequence)
  FindLibParent: streams
  Path: lilis/streams
  BuildDepends: sequence, lilis.streams
  Modules: Ls_sequence

Library batteries
  FindLibParent: streams
  Path: lilis/streams
  BuildDepends: batteries, lilis.streams
  Modules: Ls_batteries

# Library engine
#   FindLibParent: lilis
#   Path: lilis
#   BuildDepends: batteries, minicalc, lilis.stream
#   Modules:
#    Ls_type, Ls_utils, Ls_

# Library for Lsystems.

Library lilis
  Path: lilis
  Modules:
    Lilis
  InternalModules:
    Ls_type, Ls_utils, Ls_engine, Ls_lexer, Ls_syntax, Ls_parser
  BuildDepends:
    batteries, minicalc, lilis.streams.sequence

# Graphical extension of lilis.

Library glilis
  Path: glilis
  Modules: Glilis
  BuildDepends: lilis

Library cairo
  FindlibParent: glilis
  Build$: flag(cairo)
  Path: glilis
  Modules: Ls_cairo
  BuildDepends: glilis, cairo2, cairo2.lablgtk2

Library tyxml
  FindlibParent: glilis
  Build$: flag(tyxml)
  Path: glilis
  Modules: Ls_tyxml
  BuildDepends: glilis, tyxml

Executable glilis
  Build$: flag(cairo) && flag(executable) && flag(sequence)
  BuildDepends: cmdliner, cairo2.lablgtk2, glilis, glilis.cairo, glilis.tyxml, lilis.streams.sequence
#  ByteOpt+: -pp cppo
#  NativeOpt+: -pp cppo
  if flag(tyxml)
#    ByteOpt+:    -ppopt '-D Tyxml'
#    NativeOpt+:  -ppopt '-D Tyxml'
    ByteOpt+:    -pp 'cppo -D Tyxml'
    NativeOpt+:  -pp 'cppo -D Tyxml'
    # BuildDepends+: tyxml
  Install: false
  Path: glilis
  MainIs: glilis_ex.ml
  CompiledObject: best

# Tests

Executable bench_streams
  Path: test
  Build$: flag(tests)
  Install: false
  CompiledObject: best
  BuildTools: ocamlbuild
  MainIs: bench_streams.ml
  BuildDepends: lilis, lilis.streams.batteries, lilis.streams.sequence, benchmark

Executable bench_vonkoch
  Path: test
  Build$: flag(tests)
  Install: false
  CompiledObject: best
  BuildTools: ocamlbuild
  MainIs: bench_vonkoch.ml
  BuildDepends: lilis, benchmark

Executable bench_quick
  Path: test
  Build$: flag(tests)
  Install: false
  CompiledObject: best
  BuildTools: ocamlbuild
  MainIs: bench_quick.ml
  BuildDepends: lilis, benchmark

# Misc

Document doc
  Install:		false
  Title:		API reference for LILiS
  Type:			ocamlbuild (0.3)
  BuildTools:		ocamldoc, ocamlbuild
  XOCamlbuildPath:	.
  XOCamlbuildLibraries:
    minicalc,
    lilis.streams, lilis.streams.sequence, lilis.streams.batteries,
    lilis,
    glilis, glilis.cairo, glilis.tyxml

SourceRepository master
  Type: git
  Location: https://github.com/Drup/LILiS.git
  Branch: master
  Browser: https://github.com/Drup/LILiS