Von_koch {
axiom = f(0.5) - f(0.05) +(30) F(0.8) -(120) F(0.8) -(120) F(0.8)
rule F(l) = F(l/3) +(60) F(l/3) -(120) F(l/3) +(60) F(l/3)
}

Von_koch_bench {
def tplus = Turn(60)
def tmoins = Turn(- 120)
axiom = - f(0.28) + f(0.05) F(0.9)
rule F(l) = F(l/3) tplus F(l/3) tmoins F(l/3) tplus F(l/3)
}

dragon {
def X(d) Y(d) *
axiom = -(45) f(0.47) * F(0.6) X(0.6)
rule X(l) = X(l/sqrt(2)) + Y(l/sqrt(2)) F(l/sqrt(2)) +
rule Y(l) = -(90) F(l/sqrt(2)) X(l/sqrt(2)) -(90) Y(l/sqrt(2))
rule F(l) = F(l/sqrt(2))
rule * = * -(45)
}

Tetradragon {
def a
axiom = -(45) f(0.1) a F(1.1)

rule F(l) = F(l/2.23) + F(l/2.23) -(90) F(l/2.23)
rule a = a -(26.5)
}

fougere {
def X(d)
axiom = f(0.5) - f(1) - - X(0.3)
rule X(x) =
  F(x/2) -(25) [ [ X(x/2) ] +(25) X(x/2) ]
  +(25) F(x/2) [ +(25) F(x/2) X(x/2) ] -(25) X(x/2)

}
